"""
Django settings for ecom_project project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# 1. Figure out where your .env lives
BASE_DIR = Path(__file__).resolve().parent.parent

# 2. Load it!
#    This will read BASE_DIR'.env' and put those values into os.environ
load_dotenv(BASE_DIR / ".env")

# 3. Now you can safely pull them out
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["ecom-1qve.onrender.com", "localhost","ecom-shoe-b2nx.onrender.com", "127.0.0.1","ecom-shoe-no8p.onrender.com","ecom-2-backend.onrender.com"]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://ecom-client-iqeq.onrender.com",
    "https://ecom-shoe-client.onrender.com",
    "https://ecom-shoe-client.vercel.app"
    
]


# Application definition

INSTALLED_APPS = [
    'jazzmin',  
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    "cloudinary",
    "cloudinary_storage",
    'products',
    'orders',  # Your products app
    'corsheaders',  # If you are using CORS
    'django_filters',  # If you are using Django filters    
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.gzip.GZipMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecom_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': False,  # ‚ùó Important: must be False when using loaders
        'OPTIONS': {
            'loaders': [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ])
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'ecom_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
import dj_database_url

DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    # In production: use Postgres
    DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
    }
else:
    # Local dev: fallback to SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


WHITENOISE_KEEP_ONLY_HASHED_FILES = True

# Turn on automatic Brotli compression when you run collectstatic:
WHITENOISE_BROTLI = True

# (Optional) Control min file size to compress. Default is 512 bytes.
WHITENOISE_MIN_SIZE = 500  # or whatever threshold you prefer

# (Optional) If you want to emit both gzip & brotli with max compression levels,
# you can override these. Reasonable defaults are:
WHITENOISE_GZIP_COMPRESSION_LEVEL = 6   # default for gzip
WHITENOISE_BROTLI_COMPRESSION_LEVEL = 4  # mid-range, good perf/vs-size



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL  = "/media/"

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",    # <- your source static files
]
STATIC_ROOT = BASE_DIR / "staticfiles"
# Use WhiteNoise to build and serve gzip+brotli versions of your static files
STATICFILES_STORAGE = (
     "whitenoise.storage.CompressedManifestStaticFilesStorage"
)
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

PHONENUMBER_DEFAULT_REGION = "DZ"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
 # You can change this value as needed
}

# settings.py
ADMIN_URL = ""

JAZZMIN_SETTINGS = {
    # Site Branding
    "site_title": "My Store Dashboard",
    "site_header": "üõí Store Admin",
    "site_logo": "images/logo.svg",
    "site_brand": "My Shop",
    "custom_css": "css/jazzmin_overrides.css",  
    "site_title": " ",   
    "site_header": "E-commerce Admin",
    "welcome_sign": "Welcome, Store Owner!",

    # Navbar (top)
    "show_navbar": True,
    "user_display": True,

    # Sidebar (left)
    "show_sidebar": True,
    "sidebar_nav_collapsed": False,

    # Color/theme
    "topnavbar_dark": False,
    "dark_mode_theme": "black",
    "theme": "flatly",

    # Custom order of apps/models
    "ordering": ["orders", "products", "auth"],

    # Model icons
    "icons": {
        "orders.Order": "fas fa-receipt",
        "orders.OrderItem": "fas fa-box-open",
        "products.Product": "fas fa-tag",
        "products.ProductVariant": "fas fa-barcode",
    },

    # Custom menu links under the ‚Äúorders‚Äù app
    # "custom_links": {
    #     "orders": [
    #         {
    #             "name": "Pending Orders",
    #             # reverse("admin:orders_order_changelist")
    #             "url_name": "admin:orders_order_changelist",
    #             "icon": "fas fa-hourglass-half",
    #             "permissions": ["orders.view_order"],
    #             "params": {"order_status__exact": "Pending"},
    #         },
    #         {
    #             "name": "Accepted Orders",
    #             "url_name": "admin:orders_order_changelist",
    #             "icon": "fas fa-check-circle",
    #             "permissions": ["orders.view_order"],
    #             "params": {"order_status__exact": "Accepted"},
    #         },
    #         {
    #             "name": "Rejected Orders",
    #             "url_name": "admin:orders_order_changelist",
    #             "icon": "fas fa-times-circle",
    #             "permissions": ["orders.view_order"],
    #             "params": {"order_status__exact": "Rejected"},
    #         },
    #     ],
    # },

    # Dashboard Cards
    "welcome_cards": [
        {
            "name": "Total Orders",
            "type": "html",
            "content": """
                <div class="card text-center">
                    <div class="card-body">
                      <h5 class="card-title">Orders Today</h5>
                      <p class="card-text">{{ orders_today_count }}</p>
                    </div>
                </div>
            """,
        },
    ],

    # Hide or show apps/models
    "hide_models": [
        "auth.Group",
    ],
}
